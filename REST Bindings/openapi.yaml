openapi: "3.0.2"
info:
  version: 2.0.0
  title: EPCIS 2.0 REST Bindings
  license:
    name: Apache2

paths:
  /:
    options:
      summary: Query server settings, EPCIS version(s) and related vocabularies/standards.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-Vendor-version'
        - $ref: '#/components/parameters/GS1-CAPTURE-limit'
        - $ref: '#/components/parameters/GS1-CAPTURE-file-size-limit'
      responses:
        '200':
          description: Server can comply with the EPCIS-related requirements from the client.
          content:
            application/json:
              schema:
                { }

  /capture:
    post:
      summary: Stores one or more EPCIS events. The server either accepts or rejects all events.
      parameters:
        - $ref: '#/components/parameters/GS1-CAPTURE-limit'
        - $ref: '#/components/parameters/GS1-CAPTURE-file-size-limit'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        EPCIS events are added in bulk using the capture interface. To prevent timeouts for large payloads, the client
        potentially has to split the payload into several capture calls. To that end, the server specified a capture
        limit (number of events) and file size limit (payload size).

        A successful capturing of events does not guarantee that events will be stored. Instead, the server returns a
        capture id, which the client can use to obtain information about the capture job.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EPCISDocument'
      responses:
        '202':
          description: >
            Successfully captured one or more EPCIS events. The request returns a unique
            capture job URL in the Location header.
          headers:
            Location:
              $ref: '#/components/headers/Location'

        '400':
          description: An error occurred while capturing EPCIS events. All events are rejected.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 400
                        default: 400
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:ValidationException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '413':
          $ref: '#/components/responses/413QueryBodyTooLarge'

  /capture/{captureID}:
    get:
      summary: Returns information about a specific capture job.
      parameters:
        - in: path
          name: captureID
          example: /capture/id9261379075
          description: A unique value identifying a capture job generated by the server.
          required: true
          schema:
            type: string
      description: >
        This endpoint provides information about a capture job. Each time events are captured, the server generates
        a unique capture id.
      responses:
        '200':
          description: >
            If the job was successful, a list of absolute, endpoint-specific URLs of all events, in the sequence
            in which they were submitted by the client.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uri
                  example:
                    - /events/ObjectEvents/oa123
                    - /events/ObjectEvents/oa345
                uniqueItems: true
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /{topLevelResource}/events:
    get:
      summary: >
        Returns all EPCIS event types currently available in the EPCIS repository, "under" the
        specified top-level resource.
      parameters:
        - $ref: '#/components/parameters/TopLevelResource'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        The top-level resource endpoint helps to navigate EPCIS events by top-level resource, such as business location
        or business step. EPCIS 2.0 supports a number of optional top-level resources.
      responses:
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '200':
          $ref: '#/components/responses/200SupportedEventTypes'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /{topLevelResource}/events/{eventType}:
    get:
      summary: Returns EPCIS events of a given EPCIS event type for a specific top-level resource.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/TopLevelResource'
        - $ref: '#/components/parameters/EventType'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint helps to navigate EPCIS events by EPCIS event type within a top-level resource. If the EPCIS event
        type is not needed, use 'all' instead of an EPCIS event type.

        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.
        In this case, ensure that the EPCIS query does not specify the top-level and only filters by
        EPCIS event type if the EPCIS event type in path is 'all'
      responses:
        '200':
          $ref: '#/components/responses/200EventResults'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '412':
          $ref: '#/components/responses/412EventTypeMismatch'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /{topLevelResource}/events/{eventType}/{eventID}:
    get:
      summary: Returns an EPCIS event by event ID.
      parameters:
        - $ref: '#/components/parameters/TopLevelResource'
        - $ref: '#/components/parameters/EventType'
        - $ref: '#/components/parameters/EventID'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint accesses individual events "under" a top-level resource. If the EPCIS event type is not known
        or irrelevant, 'all' can be used instead of an EPCIS event type. The response body is an EPCISDocument with
        the unique event. The response body is an EPCISDocument with the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EventResults'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /events:
    get:
      summary: Returns all EPCIS event types currently available in the EPCIS repository.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        EPCIS events type specifies the context of an event. This endpoint returns all EPCIS types types that are
        currently in the repository.
      responses:
        '200':
          $ref: '#/components/responses/200SupportedEventTypes'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /events/{eventType}:
    get:
      summary: >
        Returns EPCIS events of a given EPCIS event type. If 'all' is used instead of an EPCIS event type, all
        events are returned.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/EventType'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint returns all EPCIS events of a specific EPCIS event type. If the EPCIS event type is not needed,
        'all' can be used instead of an EPCIS event type.

        The client can further restrict the the list of events returned by filtering events using the EPCIS query
        language as URL query string parameters.
      responses:
        '200':
          $ref: '#/components/responses/200EventResults'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '412':
          $ref: '#/components/responses/412EventTypeMismatch'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /events/{eventType}/{eventID}:
    get:
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/EventType'
        - $ref: '#/components/parameters/EventID'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: This endpoint accesses individual events using their unique id. If the EPCIS event type is not known
        or irrelevant, 'all' can be used instead of an EPCIS event type. The response body is an EPCISDocument with
        the unique event. The response body is an EPCISDocument with the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EventResults'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries:
    get:
      responses:
        '200':
          description: Returns a list of active queries available to that user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedQueryMetaData'
                uniqueItems: true
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/masterdata:
    get:
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/QueryName'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/ReportIfEmpty'
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200MetadataResults'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    delete:
      description: Removes a named query and disconnects clients
      responses:
        '204':
          $ref: '#/components/responses/204QueryDeleted'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryBodyTooLarge'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: Creates a new named query and returns the new query resource in the Location header
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedQueryMetaData'
      responses:
        '201':
          $ref: '#/components/responses/201QueryCreated'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/events:
    get:
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/QueryName'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/ReportIfEmpty'
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200EventResults'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleMasterDataQuery/masterdata:
    description: SimpleMasterDataQuery is an endpoint to create anonymous queries. A query is created once and returned to client. Unlike name queries, these queries are not stored.
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
      description: Executes an anonymous query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedQueryMetaData'
      responses:
        '201':
          $ref: '#/components/responses/201QueryCreated'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleEventQuery/events:
    description: SimpleEventQuery is an endpoint to create anonymous queries. A query is created once and returned to client. Unlike name queries, these queries are not stored.
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
      description: Executes an anonymous query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedQueryMetaData'
      responses:
        '201':
          $ref: '#/components/responses/201QueryCreated'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
components:
  responses:
    '101WebsocketCreated':
      description: Create a WebSocket connection to subscribe to queries. Upon subscription, the server SHALL send all new events to subscribing clients. If multiple clients have the same query, each client will receive events which they are authorized to see.
      headers:
        Upgrade:
          required: true
          schema:
            type: string
            default: websocket
        Connection:
          required: true
          schema:
            type: string
            default: upgrade
    200MetadataResults:
      headers:
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
        Location:
          $ref: '#/components/headers/Location'
      description: Returns the query result
      content:
        application/json:
          schema:
            type: object
            externalDocs:
              description: An metadata query result that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Sschema.json) or [SHACL file](../JSON/EPCIS-SHACL.ttl).
              url: ../JSON/EPCIS-SHACL.ttl
    200EventResults:
      headers:
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
        Location:
          $ref: '#/components/headers/Location'
      description: Returns the query result
      content:
        application/json:
          schema:
            type: object
            externalDocs:
              description: An event query result that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Sschema.json) or [SHACL file](../JSON/EPCIS-SHACL.ttl).
              url: ../JSON/EPCIS-SHACL.ttl
    200SupportedEventTypes:
      description: Returns all supported EPCIS event types.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISEventTypes'
    201QueryCreated:
      description: A resource was created and the link to the newly created resource is returned in the header.
      content:
        application/json:
          schema:
            { }
      headers:
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-Vendor-version:
          $ref: '#/components/headers/GS1-Vendor-version'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
        Location:
          $ref: '#/components/headers/Location'
    '204QueryDeleted':
      description: Query deleted and clients disconnected
      content:
        application/json:
          schema:
            {}
    '400QueryNameException':
      description: Exceptions defined in EPCIS 1.2, section 8.2.6 for `getQueryNames`
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ValidationException
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '400QueryInvalid':
      description: The query is invalid
      content:
        application/json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ValidationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '401AuthorizationInformationMissing':
      description: Authorization information is missing or invalid.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 401
                    default: 401
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '400QueryException':
      description: Query exceptions defined in EPCIS
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryValidationException
                      - epcisException:QueryParameterException
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '403ClientUnauthorized':
      description: Client is unauthorized to access this resource.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 403
                    default: 403
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'


    404ResourceNotFound:
      description: Either Top-level resource, event type or event ID not found
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '412EventTypeMismatch':
      description: Mismatch of the event type constraint in the path and in the query.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 412
                    default: 412
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryParameterException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    413QueryBodyTooLarge:
      # TODO: Query too long means too many events in result set
      description: Query body too large.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 413
                    default: 413
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '414URLTooLong':
      description: URL is too long. This is usually a problem with large EPCIS queries in the URL.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 414
                    default: 414
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '500ImplementationException':
      description: This is a server-side problem caused when the query was resolved and executed.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 500
                    default: 500
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
  schemas:
    Location:
      description: Location header of a resource
      type: string
      format: uri
      example: /events/ObjectEvents/eventId123
    GS1-EPCIS-version:
      description: The EPCIS version
      type: string
      pattern: ^\d+(\.\d+)?$
      example: 2.0
    GS1-EPCIS-min:
      description: The lowest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
      example: 2.0
    GS1-EPCIS-max:
      description: The highest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
      example: 2.0
    GS1-CBV-version:
      description: The core business vocabulary version
      type: string
      example: 1.22
    GS1-EPCIS-extensions:
      description: Specific EPCIS extensions supported (e.g. for FIT)
      type: object
      example: { "example-epc-ext":"http://example.com/epcis/" }
    GS1-Vendor-version:
      description: A versioning scheme that can be freely chosen by the vendor
      type: string
      example: example-vendor-version-1.0
    GS1-CBV-extensions:
      description: An optional header to specify the vocabulary for the top-level endpoints
      type: object
      example: { "ex1": "http://example.com/", "vendor1": "http://example.org/defs#" }
    GS1-CAPTURE-limit:
      description: The maximum batch size of EPCIS events that can be captured per call
      type: string
      pattern: ^(\d+|\*)$
      example: 500
    RFC7807ProblemResponseBody:
      description: A response as specified in [RFC 7807](https://tools.ietf.org/html/rfc7807)
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
      example:
        type: "epcisException:SecurityException"
        title: "Unauthorized to execute query TestQuery"
        status: 401
        instance: "/queries/TestQuery"
    ReportIfEmpty:
      description: If true, a query result is always sent to the client, even if the result set is empty
      type: boolean
    NamedQueryMetaData:
      type: object
      required:
        - name
        - query
      properties:
        name:
          type: string
        query:
          type: string
        createdAt:
          type: string
          format: date-time
        epcisQuery:
          $ref: '#/components/schemas/EPCISQuery'
        activeSubscriptions:
          type: array
          items:
            $ref: '#/components/schemas/QuerySubscriptionMetaData'
    EPCISQuery:
      type: array
      description: An EPCIS query. Either as query string parameter or in a POST payload.
      externalDocs:
        url: query-schema.json
      items:
        type: object
    QuerySubscriptionMetaData:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
    AllEvent:
      type: string
      description: A virtual EPCIS event type that is the union of all EPCIS event types.
      enum:
        - all
        - EPCISMasterData
    EPCISDocument:
      description: A container that describes a list of EPCIS events
      type: object
      externalDocs:
        description: An EPCIS document that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Sschema.json) or [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON/EPCIS-SHACL.ttl
#    EventList:
#      description: An collection of EPCIS events. An EPCIS event that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Schema.json) or [SHACL file](../JSON/EPCIS-SHACL.ttl).
#      externalDocs:
#        description: An EPCIS event that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Sschema.json) or [SHACL file](../JSON/EPCIS-SHACL.ttl).
#        url: ../JSON/EPCIS-SHACL.ttl
#      type:
#        object

    EPCISEventTypes:
      type: string
      description: The five types of EPCIS events.
      enum:
        - ObjectEvents
        - AggregationEvents
        - AssociationEvents
        - TransformationEvents
        - TransactionEvents
    GS1-QUERY-minRecordTime:
      description: An optional header to specify the smallest possible record time for EPCIS events in a query subscription
      type: string
      format: time
      example: 2020-04-04T20:33:31.116-06:00

  parameters:
    ReportIfEmpty:
      in: query
      name: reportIfEmpty
      required: false
      schema:
        $ref: '#/components/schemas/ReportIfEmpty'
    GS1-QUERY-minRecordTime:
      in: header
      name: GS1-QUERY-minRecordTime
      required: false
      schema:
        $ref: '#/components/schemas/GS1-QUERY-minRecordTime'
    Upgrade:
      in: header
      name: Upgrade
      required: false
      schema:
        type: string
        default: websocket
    Connection:
      in: header
      name: Connection
      required: false
      schema:
        type: string
        default: upgrade
    EventID:
      name: eventID
      in: path
      required: true
      schema:
        type: string
    EventType:
      name: eventType
      in: path
      required: true
      schema:
        oneOf:
          - $ref: '#/components/schemas/EPCISEventTypes'
          - $ref: '#/components/schemas/AllEvent'
    QueryName:
      in: path
      name: queryName
      description: Unique query name
      required: true
      schema:
        type: string
    PerPage:
      in: query
      name: perPage
      description: Parameter to control pagination. perPage specifies the maximum number of events returned in one batch.
      schema:
        type: integer
        default: 30
    NextPageToken:
      in: query
      name: nextPageToken
      description: Parameter that point to the next list of results when requesting a list of events that is larger than the value specified with the perPage parameter.
      schema:
        type: string
    TopLevelResource:
      in: path
      name: topLevelResource
      description: A top-level resource to access events.
      required: true
      schema:
        type: string
        enum:
          - epcs
          - bizSteps
          - bizLocations
          - readPoints
          - dispositions
    GS1-EPCIS-version:
      in: header
      name: GS1-EPCIS-version
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      in: header
      name: GS1-EPCIS-min
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      in: header
      name: GS1-EPCIS-max
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      in: header
      name: GS1-CBV-version
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      in: header
      name: GS1-EPCIS-extensions
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      in: header
      name: GS1-Vendor-version
      description: A versioning scheme that can be freely chosen by the vendor
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      in: header
      name: GS1-CBV-extensions
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    GS1-CAPTURE-limit:
      in: header
      name: GS1-CAPTURE-limit
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-CAPTURE-file-size-limit:
      in: header
      name: GS1-CAPTURE-file-size-limit
      description: The maximum event document length in octets (8-bit bytes)
      schema:
        type: string
        pattern: ^(\d+|\*)$

  headers:
    GS1-CAPTURE-limit:
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-EPCIS-version:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    Location:
      schema:
        $ref: '#/components/schemas/Location'
    GS1-QUERY-minRecordTime:
      schema:
        $ref: '#/components/schemas/GS1-QUERY-minRecordTime'
