openapi: "3.0.2"
info:
  version: 2.0.0
  title: EPCIS 2.0 REST Bindings
  license:
    name: Apache2

paths:
  /:
    options:
      summary: Query server settings, EPCIS version(s) and related vocabularies/standards
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-Vendor-version'
        - $ref: '#/components/parameters/GS1-CAPTURE-limit'
        - $ref: '#/components/parameters/GS1-CAPTURE-file-size-limit'
      responses:
        '200':
          description: Server can comply with the GS1-EPCIS-related requirements from the client.
          content:
            application/json:
              schema:
                { }

  /capture:
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-CAPTURE-limit'
        - $ref: '#/components/parameters/GS1-CAPTURE-file-size-limit'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: Captures one or several EPCIS events. The server either accepts or rejects all events.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '202':
          description: Successfully captured one or more EPCIS events. The request returns a unique capture job URL in the Location header.
          headers:
            Location:
              $ref: '#/components/headers/Location'

        '400':
          description: An error occurred while capturing EPCIS events. All events are rejected.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 400
                        default: 400
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:ValidationException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '413':
          description: The client exceeded the limit, set in GS1-CAPTURE-limit, of events that can be captured per call.
          headers:
            GS1-CAPTURE-limit:
              $ref: '#/components/schemas/GS1-CAPTURE-limit'
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 413
                        default: 413
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:CaptureException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'

  /capture/{captureID}:
    parameters:
      - in: path
        name: captureID
        required: true
        schema:
          type: string
    get:
      responses:
        '200':
          description: If the job was successful, a list of absolute, endpoint-specific URLs of all events, in the sequence in which they were submitted by the client.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                uniqueItems: true
        '400':
          description: An error occurred while capturing EPCIS events. All events are rejected.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 400
                        default: 400
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:ValidationException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          description: Capture ID not found
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 404
                        default: 404
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:NoSuchNameException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '500':
          $ref: '#/components/responses/500ImplementationException'


  /{topLevelResources}/events:
    parameters:
      - $ref: '#/components/parameters/GS1-EPCIS-version'
      - $ref: '#/components/parameters/GS1-EPCIS-min'
      - $ref: '#/components/parameters/GS1-EPCIS-max'
      - $ref: '#/components/parameters/TopLevelResources'

    get:
      responses:
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '200':
          $ref: '#/components/schemas/EPCISEventTypes'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404EventTypeOrTopLevelNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /{topLevelResources}/events/{eventTypes}:
    parameters:
      - $ref: '#/components/parameters/PerPage'
      - $ref: '#/components/parameters/TopLevelResources'
      - $ref: '#/components/parameters/EventTypes'
      - $ref: '#/components/parameters/GS1-EPCIS-version'
      - $ref: '#/components/parameters/GS1-EPCIS-min'
      - $ref: '#/components/parameters/GS1-EPCIS-max'
      - $ref: '#/components/parameters/GS1-CBV-version'
      - $ref: '#/components/parameters/GS1-EPCIS-extensions'
      - $ref: '#/components/parameters/GS1-CBV-extensions'
    get:
      description: Returns all EPCIS events of a specific type, if specified.
      responses:
        '200':
          $ref: '#/components/responses/200ReturnEventsOrMetadata'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404EventTypeOrTopLevelNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '412':
          description: Mismatch of the event type constraint in the path and in the query.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 412
                        default: 412
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:QueryParameterException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /{topLevelResources}/events/{eventTypes}/{eventID}:
    parameters:
      - $ref: '#/components/parameters/TopLevelResources'
      - $ref: '#/components/parameters/EventTypes'
      - $ref: '#/components/parameters/EventID'
    get:
      responses:
        '200':
          description: Accesses the EPCIS event corresponding to the given event URLs.
          content:
            application/json:
              schema: # TODO: LINK NEEDED: They're currently in the GS1 GitHub repository in JSON Schema.   The final reference should point to a stable URL within the gs1.org/epcis site.

                type: object
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404EventTypeOrTopLevelOrEventIdNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /events:
    parameters:
      - $ref: '#/components/parameters/GS1-EPCIS-version'
      - $ref: '#/components/parameters/GS1-EPCIS-min'
      - $ref: '#/components/parameters/GS1-EPCIS-max'

    get:
      responses:
        '200':
          description: Returns all supported EPCIS event types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISEventTypes'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /events/{eventTypes}:
    parameters:
      - $ref: '#/components/parameters/PerPage'
      - $ref: '#/components/parameters/NextPageToken'
      - $ref: '#/components/parameters/EventTypes'
      - $ref: '#/components/parameters/GS1-EPCIS-version'
      - $ref: '#/components/parameters/GS1-EPCIS-min'
      - $ref: '#/components/parameters/GS1-EPCIS-max'
      - $ref: '#/components/parameters/GS1-CBV-version'
      - $ref: '#/components/parameters/GS1-EPCIS-extensions'
      - $ref: '#/components/parameters/GS1-CBV-extensions'
    get:
      description: Returns all EPCIS events of a specific type, if specified.
      responses:
        '200':
          $ref: '#/components/responses/200ReturnEventsOrMetadata'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404EventTypeNotFound'
        '414':
          description: Query too long, if the total URL length exceeds 2000 characters.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 414
                        default: 414
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:QueryTooComplexException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '412':
          description: Mismatch of the event type constraint in the path and in the query.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 412
                        default: 412
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:QueryParameterException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /events/{eventTypes}/{eventID}:
    parameters:
      - $ref: '#/components/parameters/EventTypes'
      - $ref: '#/components/parameters/EventID'
    get:
      responses:
        '200':
          description: Accesses the EPCIS event corresponding to the given event URLs.
          content:
            application/json:
              schema: # TODO: Link to real schema when available
                type: object
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404EventTypeNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries:
    get:
      responses:
        '200':
          description: Returns a list of active queries available to that user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedQueryMetaData'
                uniqueItems: true
        '400':
          $ref: '#/components/responses/400QueryNameException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404EventTypeOrEventIdNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryNames}/metadata:
    parameters:
      - $ref: '#/components/parameters/QueryNames'
    delete:
      description: Removes a named query and disconnects clients
      responses:
        '204':
          $ref: '#/components/responses/204QueryDeleted'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404QueryNameNotFound'
        '413':
          $ref: '#/components/responses/413TooManyEventsInResult'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: Creates a new named query.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedQueryMetaData'
      responses:
        '201':
          $ref: '#/components/responses/201QueryCreatedAndExecuted'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '400':
          $ref: '#/components/responses/400QueryException'
        '414':
          $ref: '#/components/responses/414URLTooLong'
    get:
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/QueryNames'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
      responses:
        '101':
         $ref: '#/components/responses/WebsocketCreated'
        '200':
          $ref: '#/components/responses/200ReturnEventsOrMetadata'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404QueryNameNotFound'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryNames}/events:
    parameters:
      - $ref: '#/components/parameters/QueryNames'
    delete:
      description: Removes a named query and disconnects clients
      responses:
        '204':
          $ref: '#/components/responses/204QueryDeleted'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404QueryNameNotFound'
        '413':
          $ref: '#/components/responses/413TooManyEventsInResult'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: Creates a new named query.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedQueryMetaData'
      responses:
        '201':
          $ref: '#/components/responses/201QueryCreatedAndExecuted'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '400':
          $ref: '#/components/responses/400QueryException'
        '414':
          $ref: '#/components/responses/414URLTooLong'
    get:
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/QueryNames'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
      responses:
        '101':
         $ref: '#/components/responses/WebsocketCreated'
        '200':
          $ref: '#/components/responses/200ReturnEventsOrMetadata'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404QueryNameNotFound'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '500':
          $ref: '#/components/responses/500ImplementationException'
  /queries/SimpleMasterDataQuery/metadata:
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
      description: Executes an anonymous query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedQueryMetaData'
      responses:
        '101':
         $ref: '#/components/responses/WebsocketCreated'
        '200':
          $ref: '#/components/responses/200ReturnEventsOrMetadata'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404QueryNameNotFound'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleEventQuery/events:
    post:
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
      description: Executes an anonymous query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedQueryMetaData'
      responses:
        '101':
         $ref: '#/components/responses/WebsocketCreated'
        '200':
          $ref: '#/components/responses/200ReturnEventsOrMetadata'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404QueryNameNotFound'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '500':
          $ref: '#/components/responses/500ImplementationException'
components:
  responses:
    '101WebsocketCreated':
      description: Create a WebSocket connection to subscribe to queries. Upon subscription, the server SHALL send all new events to subscribing clients. If multiple clients have the same query, each client will receive events which they are authorized to see.
      headers:
        Upgrade:
          required: true
          schema:
            type: string
            default: websocket
        Connection:
          required: true
          schema:
            type: string
            default: upgrade
    200ReturnEventsOrMetadata:
      headers:
        GS1-EPCIS-version:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          schema:
            $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-Vendor-version:
          schema:
            $ref: '#/components/headers/GS1-Vendor-version'
        GS1-CBV-extensions:
          schema:
            $ref: '#/components/headers/GS1-CBV-extensions'
        Location:
          schema:
            $ref: '#/components/headers/Location'
      description: Returns a list of EPCIS events of the type specified in the path.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object # TODO: LINK NEEDED: They're currently in the GS1 GitHub repository in JSON Schema.   The final reference should point to a stable URL within the gs1.org/epcis site.
            uniqueItems: true
    '201QueryCreatedAndExecuted':
      description: A resource was created and the link to the newly created resource is returned in the header.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object # TODO: LINK NEEDED: They're currently in the GS1 GitHub repository in JSON Schema.   The final reference should point to a stable URL within the gs1.org/epcis site.
            uniqueItems: true
      #            $ref: '#/components/schemas/NamedQueryMetaData'
      headers:
        GS1-EPCIS-version:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          schema:
            $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          schema:
            $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-Vendor-version:
          schema:
            $ref: '#/components/headers/GS1-Vendor-version'
        GS1-CBV-extensions:
          schema:
            $ref: '#/components/headers/GS1-CBV-extensions'
        Location:
          schema:
            $ref: '#/components/headers/Location'
    '400QueryNameException':
      description: Exceptions defined in EPCIS 1.2, section 8.2.6 for `getQueryNames`
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ValidationException
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '400QueryInvalid':
      description: The query is invalid
      content:
        application/json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ValidationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '400QueryException':
      description: Query exceptions defined in EPCIS
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryValidationException
                      - epcisException:QueryParameterException
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '414URLTooLong':
      description: Query too long, if the total URL length exceeds 2000 characters.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 414
                    default: 414
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'

    '404EventTypeOrTopLevelOrEventIdNotFound':
      description: Either Top-level resource, event type or event ID not found
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '404EventTypeOrEventIdNotFound':
      description: Event type or event ID not found
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'

    '404QueryNameNotFound':
      description: Exceptions defined in EPCIS 1.2, section 8.2.6 for `poll`.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '403ClientUnauthorized':
      description: Client is unauthorized to access this resource.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 403
                    default: 403
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '404EventTypeOrTopLevelNotFound':
      description: Top-level resource or event type not found
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '404EventTypeNotFound':
      description: Event type not found
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '401AuthorizationInformationMissing':
      description: Authorization information is missing or invalid.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 401
                    default: 401
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '413TooManyEventsInResult':
      # TODO: Query too long means too many events in result set
      description: Query too long, if the total URL length exceeds 2000 characters.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 414
                    default: 414
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '500ImplementationException':
      description: This is a server-side problem caused when the query was resolved and executed.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 500
                    default: 500
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '204QueryDeleted':
      description: Query deleted and clients disconnected
      content:
        application/json:
          schema:
            {}
  schemas:
    Location:
      description: Location header of a resource
      type: string
      format: uri
    GS1-EPCIS-version:
      description: The EPCIS version
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-min:
      description: The lowest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-max:
      description: The highest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
    GS1-CBV-version:
      description: The core business vocabulary version
      type: string
    GS1-EPCIS-extensions:
      description: Specific EPCIS extensions supported (e.g. for FIT)
      type: object
    GS1-Vendor-version:
      description: A versioning scheme that can be freely chosen by the vendor
      type: array
      items:
        type: string
      uniqueItems: true
    GS1-CBV-extensions:
      description: An optional header to specify the vocabulary for the top-level endpoints
      type: object
    GS1-CAPTURE-limit:
      description: The maximum batch size of EPCIS events that can be captured per call
      type: string
      pattern: ^(\d+|\*)$
    RFC7807ProblemResponseBody:
      description: A response as specified in [RFC 7807](https://tools.ietf.org/html/rfc7807)
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
      example:
        type: "epcisException:SecurityException"
        title: "Unauthorized to execute query TestQuery"
        status: 401
        instance: "/queries/TestQuery"

    NamedQueryMetaData:
      type: object
      required:
        - name
        - query
      properties:
        name:
          type: string
        query:
          type: string
        createdAt:
          type: string
          format: date-time
        epcisQuery:
          $ref: '#/components/schemas/EPCISQuery'
        activeSubscriptions:
          type: array
          items:
            $ref: '#/components/schemas/QuerySubscriptionMetaData'
    EPCISQuery:
      type: array
      items:
        type: object
      externalDocs:
        url: https://...
        description: Filter EPCIS events by properties using the [EPCIS query JSON-Schema](section EPCIS query language)
    QuerySubscriptionMetaData:
      type: object
      properties:
        id:
          type: string

        createdAt:
          type: string
          format: date-time
    AllEvent:
      type: string
      description: A virtual EPCIS event superset.
      enum: [ all ]
    EPCISEventTypes:
      type: string
      description: The five types of EPCIS events.
      enum:
        - ObjectEvents
        - AggregationEvents
        - AssociationEvents
        - TransformationEvents
        - TransactionEvents

  parameters:
    GS1-QUERY-minRecordTime:
      in: header
      name: GS1-QUERY-minRecordTime
      required: false
      schema:
        type: string
        format: time
    Upgrade:
      in: header
      name: Upgrade
      required: false
      schema:
        type: string
        default: websocket
    Connection:
      in: header
      name: Connection
      required: false
      schema:
        type: string
        default: upgrade
    EventID:
      name: eventID
      in: path
      required: true
      schema:
        type: string

    EventTypes:
      name: eventTypes
      in: path
      required: true
      schema:
        oneOf:
          - $ref: '#/components/schemas/EPCISEventTypes'
          - $ref: '#/components/schemas/AllEvent'
    QueryNames:
      in: path
      name: queryNames
      description: Unique name of a named query
      required: true
      schema:
        type: string
    PerPage:
      in: query
      name: perPage
      description: Parameter to control pagination. perPage specifies the maximum number of events returned in one batch.
      schema:
        type: integer
        default: 30
    NextPageToken:
      in: query
      name: nextPageToken
      description: Paramter that point to the next list of results when requesting a list of events that is larger than the value specified with the perPage parameter.
      schema:
        type: string
    TopLevelResources:
      in: path
      name: topLevelResources
      description: A top-level resource to access events.
      required: true
      schema:
        type: string
        enum:
          - epcs
          - bizSteps
          - bizLocations
          - readPoints
          - dispositions
    GS1-EPCIS-version:
      in: header
      name: GS1-EPCIS-version
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      in: header
      name: GS1-EPCIS-min
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      in: header
      name: GS1-EPCIS-max
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      in: header
      name: GS1-CBV-version
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      in: header
      name: GS1-EPCIS-extensions
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      in: header
      name: GS1-Vendor-version
      description: A versioning scheme that can be freely chosen by the vendor
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      in: header
      name: GS1-CBV-extensions
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    GS1-CAPTURE-limit:
      in: header
      name: GS1-CAPTURE-limit
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-CAPTURE-file-size-limit:
      in: header
      name: GS1-CAPTURE-file-size-limit
      description: The maximum event document length in octets (8-bit bytes)
      schema:
        type: string
        pattern: ^(\d+|\*)$

  headers:
    GS1-CAPTURE-limit:
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-EPCIS-version:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    Location:
      schema:
        $ref: '#/components/schemas/Location'